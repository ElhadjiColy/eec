//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Sexe {
  M
  F
}

enum Profession {
  Farmer
  Artisan
  Commercant
  Cadre
  ProfessionLiberale
  Employee
  Ouvrier
  Retraite
  SansActivite
  Autre
}

enum Declarant {
  Father
  Mother
  Other
}

enum WeddingType {
  Polygamie
  PolygamieLimiteeA2
  PolygamieLimiteeA3
  Monogamie
}

enum RegimeMatrimonial {
  CommunauteLegale
  SeparationDeBiens
  ParticipationAuxAcquets
  CommunauteUniverselle
  Autre
}

enum PersonType {
  Father
  Mother
  Child
  Husband
  Wife
}

enum MentionsMarginaleRaison {
  Mariage
  Divorce
  AdoptionSimple
  AdoptionParLEtat
  RevocationAdoption
  ReconnaissanceEnfantNaturel
  ChangementDePrenom
  ChangementDeNom
  Deces
  Autre
}

model Note {
  id        String   @id() @default(uuid())
  note      String
  createdAt DateTime @default(now())
}

model Child {
  id              String                    @id() @unique() @default(uuid())
  lastName        String
  firstName       String
  firstName1      String?
  firstName2      String?
  firstName3      String?
  firstName4      String?
  firstName5      String?
  birthDate       DateTime
  birthPlace      String
  createdAt       DateTime                  @default(now())
  profession      Profession                @default(SansActivite)
  sexe            Sexe                      @default(M)
  type            PersonType
  fatherId        String
  motherId        String
  father          Father                    @relation(fields: [fatherId], references: [id])
  mother          Mother                    @relation(fields: [motherId], references: [id])
  declaredBy      Declarant                 @default(Father)
  mentionsLegales MentionsMarginaleRaison[]
}

model Mother {
  id         String     @id() @unique() @default(uuid())
  lastName   String
  firstName  String
  firstName1 String?
  firstName2 String?
  firstName3 String?
  firstName4 String?
  firstName5 String?
  birthDate  DateTime
  birthPlace String
  createdAt  DateTime   @default(now())
  profession Profession @default(SansActivite)
  sexe       Sexe       @default(M)
  type       PersonType
  children   Child[]
}

model Father {
  id         String     @id() @unique() @default(uuid())
  lastName   String
  firstName  String
  firstName1 String?
  firstName2 String?
  firstName3 String?
  firstName4 String?
  firstName5 String?
  birthDate  DateTime
  birthPlace String
  createdAt  DateTime   @default(now())
  profession Profession @default(SansActivite)
  sexe       Sexe       @default(M)
  type       PersonType
  children   Child[]
}

model Husband {
  id         String     @id() @unique() @default(uuid())
  lastName   String
  firstName  String
  firstName1 String?
  firstName2 String?
  firstName3 String?
  firstName4 String?
  firstName5 String?
  birthDate  DateTime
  birthPlace String
  createdAt  DateTime   @default(now())
  profession Profession @default(SansActivite)
  sexe       Sexe       @default(M)
  type       PersonType
  wifeId     String
  wife       Wife[]
  address    String?
}

model Wife {
  id         String     @id() @unique() @default(uuid())
  lastName   String
  firstName  String
  firstName1 String?
  firstName2 String?
  firstName3 String?
  firstName4 String?
  firstName5 String?
  birthDate  DateTime
  birthPlace String
  createdAt  DateTime   @default(now())
  profession Profession @default(SansActivite)
  sexe       Sexe       @default(M)
  type       PersonType
  husbandId  String     @unique()
  husband    Husband    @relation(fields: [husbandId], references: [id])
  address    String?
}

model Wedding {
  husbandId         String                    @unique()
  wifeId            String                    @unique()
  weddingDate       DateTime
  registereddAt     DateTime                  @default(now())
  weddingType       WeddingType               @default(Polygamie)
  regimeMatrimonial RegimeMatrimonial         @default(CommunauteLegale)
  mentionsLegales   MentionsMarginaleRaison[]

  @@id([husbandId, wifeId])
  @@unique([husbandId, wifeId])
}
