// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Note {
  id          String @id @default(uuid())
  note        String
  createdAt   DateTime @default(now())
}

enum Sexe {
  M
  F
}

// TODO: Translate to english
enum Profession {
  Farmer
  Artisan
  Commercant
  Cadre
  ProfessionLiberale
  Employee
  Ouvrier
  Retraite
  SansActivite
  Autre
}

enum Declarant {
  Father
  Mother
  Other
}

enum WeddingType {
  Polygamie
  PolygamieLimiteeA2
  PolygamieLimiteeA3
  Monogamie
}

enum RegimeMatrimonial {
  CommunauteLegale
  SeparationDeBiens
  ParticipationAuxAcquets
  CommunauteUniverselle
  Autre
}

model Person {
  id                String       @id @unique @default(uuid())
  lastName          String
  firstName         String
  firstName1        String?
  firstName2        String?
  firstName3        String?
  firstName4        String?
  firstName5        String?
  birthDate         DateTime?
  createdAt         DateTime     @default(now())
  bornedAt          String?
  profession        Profession   @default(SansActivite)
  sexe              Sexe         @default(M)
}

model Mother {
  id                String       @id @unique @default(uuid())
  lastName          String
  firstName         String
  firstName1        String?
  firstName2        String?
  firstName3        String?
  firstName4        String?
  firstName5        String?
  birthDate         DateTime?
  createdAt         DateTime     @default(now())
  borned            String?
  profession        Profession   @default(SansActivite)
  sexe              Sexe         @default(F)

  children          Birth[]
}

model Father {
  id                String       @id @unique @default(uuid())
  lastName          String
  firstName         String
  firstName1        String?
  firstName2        String?
  firstName3        String?
  firstName4        String?
  firstName5        String?
  birthDate         DateTime?
  createdAt         DateTime    @default(now())
  borned            String?
  profession        Profession  @default(SansActivite)
  sexe              Sexe        @default(M)

  children          Birth[]

}

model Birth {
  lastName          String
  firstName         String
  firstName1        String?
  firstName2        String?
  firstName3        String?
  firstName4        String?
  firstName5        String?
  birthDate         DateTime
  createdAt         DateTime    @default(now())
  borned            String
  sexe              Sexe        @default(M)

  fatherId          String      @unique
  motherId          String      @unique
  father            Father      @relation(fields: [fatherId], references: [id])
  mother            Mother      @relation(fields: [motherId], references: [id])
  declaredBy        Declarant   @default(Father)

  @@id([fatherId, motherId])
}

model Husband {
  id                String      @id @unique @default(uuid())
  lastName          String
  firstName         String
  firstName1        String?
  firstName2        String?
  firstName3        String?
  firstName4        String?
  firstName5        String?
  birthDate         DateTime
  createdAt         DateTime    @default(now())
  borned            String
  profession        Profession  @default(SansActivite)
  sexe              Sexe        @default(M)

  wifeId            String
  wife              Wife[]
}

model Wife {
  id                String      @id @unique @default(uuid())
  lastName          String
  firstName         String
  firstName1        String?
  firstName2        String?
  firstName3        String?
  firstName4        String?
  firstName5        String?
  birthDate         DateTime
  registereddAt     DateTime    @default(now())
  borned            String
  profession        Profession  @default(SansActivite)
  sexe              Sexe        @default(F)
  husbandId         String      @unique

  husband           Husband     @relation(fields: [husbandId], references: [id])
}

model Wedding {
  husbandId         String            @unique
  wifeId            String            @unique
  weddingDate       DateTime
  registereddAt     DateTime          @default(now())

  weddingType       WeddingType       @default(Polygamie)
  regimeMatrimonial RegimeMatrimonial @default(CommunauteLegale)

  @@id([husbandId, wifeId])
}
