//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Sexe {
  M
  F
}

enum Profession {
  Farmer
  Artisan
  Commercant
  Cadre
  ProfessionLiberale
  Employee
  Ouvrier
  Retraite
  SansActivite
  Autre
}

enum Declarant {
  Father
  Mother
  Other
}

enum WeddingType {
  Polygamie
  PolygamieLimiteeA2
  PolygamieLimiteeA3
  Monogamie
}

enum RegimeMatrimonial {
  CommunauteLegale
  SeparationDeBiens
  ParticipationAuxAcquets
  CommunauteUniverselle
  Autre
}

enum PersonType {
  Father
  Mother
  Child
  Husband
  Wife
  Undefined
}

enum MentionsMarginalesRaison {
  Mariage
  Divorce
  AdoptionSimple
  AdoptionParLEtat
  RevocationAdoption
  ReconnaissanceEnfantNaturel
  ChangementDePrenom
  ChangementDeNom
  Deces
  Autre
}

model Note {
  id        String   @id() @default(uuid())
  note      String
  createdAt DateTime @default(now())
}

/// @@delegate(type)
model Person {
  id                   String     @id() @unique() @default(uuid())
  cni                  String     @unique()
  lastName             String
  firstName            String
  firstName1           String?
  firstName2           String?
  firstName3           String?
  firstName4           String?
  firstName5           String?
  birthDate            DateTime
  birthPlace           String
  createdAt            DateTime   @default(now())
  profession           Profession @default(SansActivite)
  sexe                 Sexe       @default(M)
  type                 PersonType @default(Undefined)
  address              String?
  phone                String?
  email                String?
  delegate_aux_child   Child?
  delegate_aux_mother  Mother?
  delegate_aux_father  Father?
  delegate_aux_husband Husband?
  delegate_aux_wife    Wife?
  delegate_aux_death   Death?

  @@index([cni])
}

model Child {
  id                  String                     @id() @unique()
  fatherId            String
  motherId            String
  father              Father                     @relation(fields: [fatherId], references: [id])
  mother              Mother                     @relation(fields: [motherId], references: [id])
  declaredBy          Declarant                  @default(Father)
  mentionsLegales     MentionsMarginalesRaison[]
  archived            Boolean                    @default(false)
  delegate_aux_person Person                     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Mother {
  id                  String  @id() @unique()
  children            Child[]
  delegate_aux_person Person  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Father {
  id                  String  @id() @unique()
  children            Child[]
  delegate_aux_person Person  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Husband {
  id                  String @id() @unique()
  wife                Wife[]
  delegate_aux_person Person @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Wife {
  id                  String  @id() @unique()
  husbandId           String  @unique()
  husband             Husband @relation(fields: [husbandId], references: [id])
  delegate_aux_person Person  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Wedding {
  husbandId         String                     @unique()
  wifeId            String                     @unique()
  weddingDate       DateTime
  registeredAt      DateTime                   @default(now())
  registerNumber    Int
  weddingType       WeddingType                @default(Polygamie)
  regimeMatrimonial RegimeMatrimonial          @default(CommunauteLegale)
  mentionsLegales   MentionsMarginalesRaison[]
  archived          Boolean                    @default(false)

  @@id(name: "weddingId", [husbandId, wifeId])
}

model Death {
  id                  String                     @id() @unique()
  deathDate           DateTime
  deathPlace          String
  registeredAt        DateTime                   @default(now())
  registerNumber      Int
  declaredBy          Declarant                  @default(Other)
  mentionsLegales     MentionsMarginalesRaison[]
  archived            Boolean                    @default(false)
  delegate_aux_person Person                     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
